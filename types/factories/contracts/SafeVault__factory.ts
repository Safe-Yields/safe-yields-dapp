/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type { SafeVault, SafeVaultInterface } from "../../contracts/SafeVault";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stableCoin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stableCoin",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161096038038061096083398101604081905261002f916100bb565b6100388161003e565b506100eb565b60006100566000805160206109408339815191525490565b90506001600160a01b038116610083576001600160a01b0360008051602061094083398151915255610098565b336001600160a01b0382161461009857600080fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000602082840312156100cd57600080fd5b81516001600160a01b03811681146100e457600080fd5b9392505050565b610846806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318160ddd1461005c57806327e235e314610077578063b6b55f2514610097578063c4d66de8146100ac578063f3fef3a3146100bf575b600080fd5b61006560015481565b60405190815260200160405180910390f35b610065610085366004610659565b60026020526000908152604090205481565b6100aa6100a536600461067b565b6100d2565b005b6100aa6100ba366004610659565b610267565b6100aa6100cd366004610694565b610315565b6101046040518060400160405280601181526020017014d8599955985d5b1d0b99195c1bdcda5d607a1b815250610550565b6000811161012d5760405162461bcd60e51b8152600401610124906106be565b60405180910390fd5b61016c6040518060400160405280601a81526020017f536166655661756c742e6465706f7369743a205f616d6f756e7400000000000081525082610596565b6101ab6040518060400160405280601881526020017f536166655661756c742e6465706f7369743a205f757365720000000000000000815250336105db565b33600090815260026020526040812080548392906101ca90849061071c565b9250508190555080600160008282546101e3919061071c565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561023f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102639190610735565b5050565b60006102917fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b0381166102d0576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556102e5565b336001600160a01b038216146102e557600080fd5b506000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61034860405180604001604052806012815260200171536166655661756c742e776974686472617760701b815250610550565b6103876040518060400160405280601b81526020017f536166655661756c742e77697468647261773a205f616d6f756e74000000000081525082610596565b6103c66040518060400160405280601d81526020017f536166655661756c742e77697468647261773a205f7265636569766572000000815250836105db565b6103f26040518060400160405280600a81526020016936b9b39739b2b73232b960b11b815250336105db565b600081116104125760405162461bcd60e51b8152600401610124906106be565b336000908152600260205260409020548111156104975760405162461bcd60e51b815260206004820152603760248201527f536166655661756c743a20757365722062616c616e6365206973206c6573732060448201527f7468616e20616d6f756e7420746f2077697468647261770000000000000000006064820152608401610124565b33600090815260026020526040812080548392906104b6908490610757565b9250508190555080600160008282546104cf9190610757565b909155505060005460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610735565b505050565b6105938160405160240161056491906107b0565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261061c565b50565b61026382826040516024016105ac9291906107c3565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b17905261061c565b61026382826040516024016105f19291906107e5565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790525b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b038116811461065457600080fd5b919050565b60006020828403121561066b57600080fd5b6106748261063d565b9392505050565b60006020828403121561068d57600080fd5b5035919050565b600080604083850312156106a757600080fd5b6106b08361063d565b946020939093013593505050565b60208082526028908201527f536166655661756c743a20616d6f756e74206d75737420626520677265617465604082015267072207468616e20360c41b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561072f5761072f610706565b92915050565b60006020828403121561074757600080fd5b8151801515811461067457600080fd5b8181038181111561072f5761072f610706565b6000815180845260005b8181101561079057602081850181015186830182015201610774565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610674602083018461076a565b6040815260006107d6604083018561076a565b90508260208301529392505050565b6040815260006107f8604083018561076a565b90506001600160a01b0383166020830152939250505056fea2646970667358221220601af6ef551d98583597e972635fae3a389f0e41aa59ad3c70f44ed4a5bc992d64736f6c63430008110033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103";

type SafeVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeVault__factory extends ContractFactory {
  constructor(...args: SafeVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _stableCoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafeVault> {
    return super.deploy(_stableCoin, overrides || {}) as Promise<SafeVault>;
  }
  override getDeployTransaction(
    _stableCoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_stableCoin, overrides || {});
  }
  override attach(address: string): SafeVault {
    return super.attach(address) as SafeVault;
  }
  override connect(signer: Signer): SafeVault__factory {
    return super.connect(signer) as SafeVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeVaultInterface {
    return new utils.Interface(_abi) as SafeVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeVault {
    return new Contract(address, _abi, signerOrProvider) as SafeVault;
  }
}
