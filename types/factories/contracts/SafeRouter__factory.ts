/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type {
  SafeRouter,
  SafeRouterInterface,
} from "../../contracts/SafeRouter";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_kyberSwapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usd",
        type: "address",
      },
      {
        internalType: "address",
        name: "_safeToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_kyberSwapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usd",
        type: "address",
      },
      {
        internalType: "address",
        name: "_safeToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "kyberSwapRouterContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "proxyAndBuy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "safeTokenContract",
    outputs: [
      {
        internalType: "contract ISafeToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "safeAmount",
        type: "uint256",
      },
    ],
    name: "sellAndProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swap",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapSimpleMode",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_allowedContract",
        type: "address",
      },
    ],
    name: "updateAllowedContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usd",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type SafeRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeRouter__factory extends ContractFactory {
  constructor(...args: SafeRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _kyberSwapRouter: PromiseOrValue<string>,
    _usd: PromiseOrValue<string>,
    _safeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafeRouter> {
    return super.deploy(
      _kyberSwapRouter,
      _usd,
      _safeToken,
      overrides || {}
    ) as Promise<SafeRouter>;
  }
  override getDeployTransaction(
    _kyberSwapRouter: PromiseOrValue<string>,
    _usd: PromiseOrValue<string>,
    _safeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _kyberSwapRouter,
      _usd,
      _safeToken,
      overrides || {}
    );
  }
  override attach(address: string): SafeRouter {
    return super.attach(address) as SafeRouter;
  }
  override connect(signer: Signer): SafeRouter__factory {
    return super.connect(signer) as SafeRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeRouterInterface {
    return new utils.Interface(_abi) as SafeRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeRouter {
    return new Contract(address, _abi, signerOrProvider) as SafeRouter;
  }
}
