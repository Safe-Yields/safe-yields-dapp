/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface SafeRouterInterface extends utils.Interface {
  functions: {
    "approveTokens(address[],address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "kyberSwapRouterContract()": FunctionFragment;
    "proxyAndBuy(bytes)": FunctionFragment;
    "safeTokenContract()": FunctionFragment;
    "sellAndProxy(bytes,uint256)": FunctionFragment;
    "swap()": FunctionFragment;
    "swapSimpleMode()": FunctionFragment;
    "updateAllowedContract(address)": FunctionFragment;
    "usd()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveTokens"
      | "initialize"
      | "kyberSwapRouterContract"
      | "proxyAndBuy"
      | "safeTokenContract"
      | "sellAndProxy"
      | "swap"
      | "swapSimpleMode"
      | "updateAllowedContract"
      | "usd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "kyberSwapRouterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAndBuy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellAndProxy",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "swap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapSimpleMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usd", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kyberSwapRouterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyAndBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellAndProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapSimpleMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usd", data: BytesLike): Result;

  events: {};
}

export interface SafeRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveTokens(
      tokens: PromiseOrValue<string>[],
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _kyberSwapRouter: PromiseOrValue<string>,
      _usd: PromiseOrValue<string>,
      _safeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kyberSwapRouterContract(overrides?: CallOverrides): Promise<[string]>;

    proxyAndBuy(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTokenContract(overrides?: CallOverrides): Promise<[string]>;

    sellAndProxy(
      data: PromiseOrValue<BytesLike>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(overrides?: CallOverrides): Promise<[string]>;

    swapSimpleMode(overrides?: CallOverrides): Promise<[string]>;

    updateAllowedContract(
      _allowedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usd(overrides?: CallOverrides): Promise<[string]>;
  };

  approveTokens(
    tokens: PromiseOrValue<string>[],
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _kyberSwapRouter: PromiseOrValue<string>,
    _usd: PromiseOrValue<string>,
    _safeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kyberSwapRouterContract(overrides?: CallOverrides): Promise<string>;

  proxyAndBuy(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTokenContract(overrides?: CallOverrides): Promise<string>;

  sellAndProxy(
    data: PromiseOrValue<BytesLike>,
    safeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(overrides?: CallOverrides): Promise<string>;

  swapSimpleMode(overrides?: CallOverrides): Promise<string>;

  updateAllowedContract(
    _allowedContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usd(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveTokens(
      tokens: PromiseOrValue<string>[],
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _kyberSwapRouter: PromiseOrValue<string>,
      _usd: PromiseOrValue<string>,
      _safeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    kyberSwapRouterContract(overrides?: CallOverrides): Promise<string>;

    proxyAndBuy(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTokenContract(overrides?: CallOverrides): Promise<string>;

    sellAndProxy(
      data: PromiseOrValue<BytesLike>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(overrides?: CallOverrides): Promise<string>;

    swapSimpleMode(overrides?: CallOverrides): Promise<string>;

    updateAllowedContract(
      _allowedContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usd(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    approveTokens(
      tokens: PromiseOrValue<string>[],
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _kyberSwapRouter: PromiseOrValue<string>,
      _usd: PromiseOrValue<string>,
      _safeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kyberSwapRouterContract(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAndBuy(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    sellAndProxy(
      data: PromiseOrValue<BytesLike>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(overrides?: CallOverrides): Promise<BigNumber>;

    swapSimpleMode(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllowedContract(
      _allowedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usd(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTokens(
      tokens: PromiseOrValue<string>[],
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _kyberSwapRouter: PromiseOrValue<string>,
      _usd: PromiseOrValue<string>,
      _safeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kyberSwapRouterContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxyAndBuy(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellAndProxy(
      data: PromiseOrValue<BytesLike>,
      safeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapSimpleMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAllowedContract(
      _allowedContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usd(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
